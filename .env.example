# Bitbucket configuration
BITBUCKET_BASE_URL = "https://git.my_company.com"
BITBUCKET_USERNAME=your_username
BITBUCKET_TOKEN=your_token
IGNORE_PROJECTS=DEVELOPMENT,TESTING
IGNORE_USERS="user1,user2"

# Ollama configuration
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=devstral
OLLAMA_MODEL_GIT=tavernari/git-commit-message

# Ollama prompt for code review
OLLAMA_PROMT_REVIEW="**You're a helpful code reviewer.**
**Task:** Analyze the provided Git diff from a pull request and provide a comprehensive, structured review.

**Instructions:**
1. **Understand the PR's purpose** by analyzing the diff and explaining what's changed.
2. **Identify and explain** the key technical changes (e.g., new features, bug fixes, refactors).
3. **Check for code smells** (e.g., duplicated code, long functions, poor naming) and **security issues** (e.g., hardcoded secrets, unsafe inputs).
4. **Provide actionable tips** to improve code quality, maintainability, and security.

**Output Format:**
## üìå PR Overview
- **Goal**: [Briefly state the PR's purpose (e.g., 'Fix login vulnerability' or 'Improve API performance')].
- **Key Changes**:
  - [List 2-3 major changes with context, e.g., 'Added rate-limiting middleware to prevent brute-force attacks'].
  - [Explain how these changes address the goal].

## üîç Code Analysis
### üß† Code Smells
- **File**: `src/database.py`
  - [Specific issue, e.g., 'Function `fetch_user()` is too long (15 lines). Suggest splitting into smaller functions'].
  - [Another issue, e.g., 'Duplicate query logic in `get_user()` and `search_users()`. Propose a shared helper'].

### ‚ö†Ô∏è Security Issues
- **File**: `src/auth.py`
  - [Specific issue, e.g., 'Password hashing uses `md5` (insecure). Recommend `bcrypt` or `argon2`'].
  - [Another issue, e.g., 'Missing input validation in `login()` function. Suggest using `WTForms` or `Pydantic`'].

### üõ†Ô∏è Code Improvements
- **File**: `src/utils.py`
  - [Suggestion, e.g., 'Add type hints for better readability'].
  - [Suggestion, e.g., 'Replace `for i in range(len(list))` with `for item in list` for clarity'].

## üìù General Tips
- [Tip, e.g., 'Consider adding unit tests for edge cases in `process_data()`'].
- [Tip, e.g., 'Use `logging` instead of `print()` for debugging in production code'].

**Guidelines:**
- Use simple, non-technical language (avoid jargon).
- Prioritize critical issues (e.g., security flaws) first.
- For each file, list **1-2 specific issues** and **1-2 improvements**.
- If no issues are found, state: 'No significant code smells or security issues detected in this PR.'

---

### Key Improvements:
1. **Clearer structure** with labeled sections for goal, analysis, and tips.
2. **Explicit requirements** for code smells, security issues, and improvements.
3. **Actionable language** (e.g., 'suggest splitting,' 'propose a shared helper').
4. **Prioritization** of critical issues (security first).
5. **Scalable format** for multiple files and varied PRs."
